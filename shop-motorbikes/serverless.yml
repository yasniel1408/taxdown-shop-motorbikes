org: yascode
app: shop-motorbikes-api
service: shop-motorbikes

useDotenv: true

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local

custom:
  tableName: customers-table-${self:provider.stage}
  apiGateway:
    apiKeys:
      - name: shop-motorbikes-api-key-${self:provider.stage}
        description: API Key for shop-motorbikes service ${self:provider.stage}
  dotenv:
    path: .env.${self:provider.stage}
    include:
      - NODE_ENV
      - STAGE
      - REGION
      - CUSTOMERS_TABLE
    logging: true
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude:
      - aws-sdk
    target: node18
    define:
      require.resolve: undefined
    platform: node
    concurrency: 10
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    apiKey: d41d8cd98f00b204e9800998ecf8427e
    noPrependStageInUrl: true
    useChildProcesses: true
    stages:
      - dev
    host: localhost
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION, 'us-east-1'}
  apiGateway:
    apiKeys:
      - name: ${self:service}-${self:provider.stage}-key
    usagePlan:
      quota:
        limit: 5000
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
    metrics: true
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
      fullExecutionData: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt CustomersTable.Arn
            - !Join
              - /
              - - !GetAtt CustomersTable.Arn
                - index/*
  environment:
    CUSTOMERS_TABLE: ${self:custom.tableName}
    NODE_ENV: ${self:provider.stage}

functions:
  api:
    handler: dist/handler.handler
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          private: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              headers:
                x-api-key: true

resources:
  Resources:
    CustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: availableCredit
            AttributeType: 'N'
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreditIndex
            KeySchema:
              - AttributeName: availableCredit
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi